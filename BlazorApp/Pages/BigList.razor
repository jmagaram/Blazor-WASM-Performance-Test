@page "/biglist"

<style>
    th {
        font-weight: normal;
        color: darkgray;
        padding-right: 10px;
    }
</style>

<h1>Big List</h1>

<EditForm Model="@FormModel" OnValidSubmit="@(async () => await HandleValidSubmit())">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <p>
        <label>
            Items in list:
            <InputNumber id="inputNumber" @bind-Value="FormModel.ItemCount" />
        </label>
    </p>
    @if (RenderStatus != "")
    {
        <div style="margin-top:20px" class="alert alert-info">
            @RenderStatus
        </div>
    }
    else
    {
        <button class="btn btn-primary" type="submit">Submit</button>
    }
</EditForm>
<hr />
@if (!IsRendering)
{
    <button class="btn btn-primary" @onclick="InsertAtTop">Insert at front of list</button>
    <br />
}
@for (int i = 0; i < Records.Count; i++)
{
    var r = Records[i];
    <br />
    <table>
        <tr><th>Item</th><td>@(i+1)</td></tr>
        <tr><th>Title</th><td>@r.Title</td></tr>
        <tr><th>Notes</th><td>@r.Notes</td></tr>
        <tr><th>Modified</th><td>@r.Modified.ToShortDateString()</td></tr>
        <tr><th>Important</th><td>@r.Important</td></tr>
        <tr><th>Year</th><td>@r.Year</td></tr>
        <tr>
            <th>Commands</th>
            <td>
                <button class="btn btn-secondary btn-sm" @onclick="()=> r.SetRandomValues()">Randomize</button>
                <button class="btn btn-secondary btn-sm" @onclick="()=> Records.Remove(r)">Delete</button>
            </td>
        </tr>
    </table>
}
@if (!IsRendering)
{
    <hr />
    <button class="btn btn-primary" @onclick="InsertAtEnd">Add to end of list</button>
}

@code {
    public List<Record> Records { get; private set; }

    private FormModel FormModel { get; } = new FormModel { ItemCount = 100 };

    public string RenderStatus { get; set; } = "";

    public bool IsRendering => RenderStatus != "";

    private async Task HandleValidSubmit()
    {
        RenderStatus = $"Rendering {FormModel.ItemCount} records. Please wait...";
        Records.Clear();
        await Task.Delay(50); // long enough to get UI to re-render the status message
        InitializeRecords(FormModel.ItemCount);
        RenderStatus = "";
    }

    protected override void OnInitialized() => InitializeRecords(100);

    private void InitializeRecords(int count)
    {
        Records = new List<Record>();
        for (int i = 0; i < count; i++)
        {
            Records.Add(new Record());
        }
    }

    private void InsertAtEnd() => Records.Add(new Record());

    private void InsertAtTop() => Records.Insert(0, new Record());
}
